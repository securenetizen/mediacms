# Generated by Django 5.2 on 2025-05-05 01:39

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import imagekit.models.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlackListedEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(db_index=True, help_text='email that will be blacklisted', max_length=90, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('logo', imagekit.models.fields.ProcessedImageField(blank=True, default='userlogos/user.jpg', help_text='<br />For best results, use a centre-aligned photo with a 16:9 aspect ratio.', upload_to='userlogos/%Y/%m/%d')),
                ('description', models.TextField(blank=True, verbose_name='Biography')),
                ('name', models.CharField(db_index=True, max_length=250, verbose_name='full name')),
                ('date_added', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='date added')),
                ('is_featured', models.BooleanField(db_index=True, default=False, verbose_name='Is featured')),
                ('institution', models.CharField(blank=True, max_length=250, verbose_name='institution')),
                ('title', models.CharField(blank=True, max_length=250, verbose_name='Title')),
                ('advancedUser', models.BooleanField(db_index=True, default=False, verbose_name='Trusted User')),
                ('media_count', models.IntegerField(default=0)),
                ('notification_on_comments', models.BooleanField(default=True, verbose_name='Notify me about comments on my content')),
                ('location', models.CharField(blank=True, max_length=250, verbose_name='Location')),
                ('location_country', models.CharField(blank=True, choices=[('AQ', 'Antarctica'), ('AU', 'Australia'), ('BD', 'Bangladesh'), ('BT', 'Bhutan'), ('BU', 'Bougainville'), ('BN', 'Brunei Darussalam'), ('KH', 'Cambodia'), ('CN', 'China'), ('EG', 'Egypt'), ('FJ', 'Fiji'), ('PF', 'French Polynesia'), ('GU', 'Guam'), ('HA', 'Hawaii'), ('HK', 'Hong Kong'), ('IN', 'India'), ('ID', 'Indonesia'), ('XX', 'International'), ('JP', 'Japan'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic Of"), ('LA', 'Laos'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('MH', 'Marshall Islands'), ('FM', 'Micronesia, Federated States Of'), ('MN', 'Mongolia'), ('MM', 'Myanmar'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('MP', 'Northern Mariana Islands'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PG', 'Papua New Guinea'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('WS', 'Samoa'), ('SG', 'Singapore'), ('SB', 'Solomon Islands'), ('LK', 'Sri Lanka'), ('TW', 'Taiwan'), ('TH', 'Thailand'), ('TI', 'Tibet'), ('TL', 'Timor-Leste'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TV', 'Tuvalu'), ('VU', 'Vanuatu'), ('VN', 'Viet Nam'), ('WP', 'West Papua'), ('KR', 'south Korea')], default='XX', max_length=5, null=True, verbose_name='Country')),
                ('home_page', models.URLField(blank=True, help_text='The URL for your external home page, if you have one.', max_length=250, verbose_name='Home page')),
                ('social_media_links', models.TextField(blank=True, help_text='Comma separated list of URLs', verbose_name='Social Media links')),
                ('is_editor', models.BooleanField(db_index=True, default=False, verbose_name='MediaCMS Editor')),
                ('is_manager', models.BooleanField(db_index=True, default=False, verbose_name='MediaCMS Manager')),
                ('allow_contact', models.BooleanField(default=True, verbose_name='Whether allow contact will be shown on profile page')),
                ('last_published_video_datetime', models.DateTimeField(db_index=True, default='2008-1-1', verbose_name='datetime of the last video that was published')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['-date_added', 'name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=90)),
                ('description', models.TextField(blank=True, help_text='description')),
                ('add_date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('friendly_token', models.CharField(blank=True, max_length=12)),
                ('banner_logo', imagekit.models.fields.ProcessedImageField(blank=True, default='userlogos/banner.jpg', upload_to='userlogos/%Y/%m/%d')),
                ('subscribers', models.ManyToManyField(blank=True, related_name='subscriptions', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='channels', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(blank=True, max_length=30)),
                ('notify', models.BooleanField(default=False)),
                ('method', models.CharField(choices=[('email', 'Email')], default='email', max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['-date_added', 'name'], name='users_user_date_ad_4eb0b8_idx'),
        ),
    ]
